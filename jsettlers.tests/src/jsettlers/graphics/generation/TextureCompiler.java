package jsettlers.graphics.generation;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Hashtable;

/**
 * This program compiles all textures into the needed format for graphics
 * 
 * @author michael
 */
public class TextureCompiler implements Runnable, TextureIndex {

	private final File rawDirectory = new File(
			"../jsettlers.common/resources/textures_raw");
	private DataOutputStream textureIndexOut;
	private int textureCounter = 0;

	private PrintWriter textureConstantsOut;
	private int imageIndexCounter;

	private final Hashtable<String, Integer> imageIndexes = new Hashtable<String, Integer>();

	private final Object imageIndexMutex = new Object();
	private final Object textureCounterMutex = new Object();

	public static void main(String[] args) {
		new TextureCompiler().run();
	}

	@Override
	public void run() {
		try {
			openTextureIndex();

			TextureGenerator gen = new TextureGenerator(this);
			gen.start();
			String[] files = rawDirectory.list();
			for (String file : files) {
				if (file.matches(".*\\.png")) {
					String name = file.replaceAll("\\.png", "");
					gen.addTexturesByName(Collections.singletonList(name));
				}
			}
			gen.join();

			closeTextureIndex();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private void openTextureIndex() throws IOException {
		textureIndexOut = new DataOutputStream(new FileOutputStream(new File(
				"../jsettlers.common/resources/images/texturemap")));
		textureIndexOut.write(new byte[] { 'T', 'E', 'X', '1' });

		textureConstantsOut = new PrintWriter(
				new File(
						"../jsettlers.common/src/jsettlers/common/images/TextureMap.java"));
		textureConstantsOut.println("package jsettlers.common.images;");
		textureConstantsOut.println("import java.util.Arrays;");
		textureConstantsOut.println();
		textureConstantsOut
				.println("// DO NOT EDIT THIS FILE, IT IS GENERATED");
		textureConstantsOut.println();
		textureConstantsOut.println("public final class TextureMap {");
		textureConstantsOut.println("	private TextureMap() {}");
		textureConstantsOut.println();

		textureConstantsOut
				.println("	public static int getIndex(String name) {");
		textureConstantsOut
				.println("		int arrindex = Arrays.binarySearch(names, name);");
		textureConstantsOut.println("		if (arrindex < 0) {");
		textureConstantsOut
				.println("			throw new IllegalArgumentException(\"Could not find \" + name + \" in image map.\");");
		textureConstantsOut.println("		}");
		textureConstantsOut.println("		return indexes[arrindex];");
		textureConstantsOut.println("	}");
		textureConstantsOut.println();
		System.out.println("Opened texture index");
	}

	private void closeTextureIndex() throws IOException {
		ArrayList<String> sortedIndexes = new ArrayList<String>(
				imageIndexes.keySet());
		Collections.sort(sortedIndexes);

		textureIndexOut.close();
		textureConstantsOut
				.println("	private static final String[] names = new String[] {");
		for (String n : sortedIndexes) {
			textureConstantsOut.println("		\"" + n + "\",");
		}
		textureConstantsOut.println("	};");

		textureConstantsOut
				.println("	private static final int[] indexes = new int[] {");
		for (String n : sortedIndexes) {
			textureConstantsOut.println("		" + imageIndexes.get(n) + ",");
		}
		textureConstantsOut.println("	};");

		textureConstantsOut.println("}");
		textureConstantsOut.close();

		System.out.println("Closed texture index");
	}

	@Override
	public void registerTexture(String name, int textureFile, int offsetx,
			int offsety, int width, int height, boolean hasTorso,
			TexturePosition position) throws IOException {
		synchronized (imageIndexMutex) {
			String safename = name.replaceAll("[^a-zA-Z0-9._]", "_");
			// textureConstantsOut.println("	public static final int " +
			// safename +
			// " = " + imageIndexCounter + ";");
			// textureConstantsOut.println();

			imageIndexes.put(safename, imageIndexCounter);

			textureIndexOut.writeShort(offsetx);
			textureIndexOut.writeShort(offsety);
			textureIndexOut.writeShort(width);
			textureIndexOut.writeShort(height);
			textureIndexOut.writeShort(hasTorso ? textureFile | 0x8000
					: textureFile);

			textureIndexOut.writeShort(toShort(position.getLeft()));
			textureIndexOut.writeShort(toShort(position.getTop()));
			textureIndexOut.writeShort(toShort(position.getRight()));
			textureIndexOut.writeShort(toShort(position.getBottom()));

			System.out.println("Added image " + imageIndexCounter
					+ " to texture " + textureFile
					+ " and added to constant index as " + safename);

			imageIndexCounter++;
		}
	}

	private static int toShort(float left) {
		return (int) (left * 0x7fff);
	}

	@Override
	public int getNextTextureIndex() {
		synchronized (textureCounterMutex) {
			return textureCounter++;
		}
	}
}
